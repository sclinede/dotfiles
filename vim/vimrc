set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim

set encoding=utf-8
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'

" Vundle help
""""""""""""""
" :PluginList          - list configured bundles
" :PluginInstall(!)    - install(update) bundles
" :PluginSearch(!) foo - search(or refresh cache first) for foo
" :PluginClean(!)      - confirm(or auto-approve) removal of unused bundles

" VCS
Plugin 'tpope/vim-fugitive'

" System
Plugin 'vim-scripts/Gist.vim'
Plugin 'mattn/webapi-vim'
" Plugin 'majutsushi/tagbar'
" Plugin 'neovim/spellfile.vim' - not working
" ack
" Plugin 'rking/ag.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-surround'
" Plugin 'scrooloose/syntastic'
" Plugin 'Raimondi/delimitMate'
Plugin 'luochen1990/rainbow'
Plugin 'kien/ctrlp.vim'
" Plugin 'mhinz/vim-signify'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'lyokha/vim-xkbswitch'
Plugin 'svermeulen/vim-easyclip'
Plugin 'tpope/vim-repeat'


" Syntaxes
" TODO: add haml
" unipai
" YouCompleteMe
Plugin 'leshill/vim-json'
Plugin 'puppetlabs/puppet-syntax-vim'
Plugin 'jtratner/vim-flavored-markdown'
Plugin 'othree/html5.vim'
Plugin 'itspriddle/vim-jquery'
Plugin 'atourino/jinja.vim'
Plugin 'saltstack/salt-vim'
Plugin 'ntpeters/vim-better-whitespace'

" Python
Plugin 'nvie/vim-flake8'
Plugin 'fs111/pydoc.vim'

" Ruby
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-rake'
Plugin 'AndrewRadev/splitjoin.vim'
" Plugin 'ruby_pry.vim' - not working yet

" Fun, but not useful
Plugin 'altercation/vim-colors-solarized'
" Plugin 'skammer/vim-css-color'
" Plugin 'mgutz/vim-colors'
Plugin 'ehamberg/vim-cute-python'
" Plugin 'bling/vim-airline'
Plugin 'tomasr/molokai'

" Snippets
" Plugin 'tomtom/tlib_vim'
" Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'honza/vim-snippets'
" Plugin 'garbas/vim-snipmate'
" Plugin 'scrooloose/snipmate-snippets'
Plugin 'SirVer/ultisnips'

" Just try`
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-dispatch'
Plugin 'slim-template/vim-slim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'jgdavey/tslime.vim'
Plugin 'ngmy/vim-rubocop'

call vundle#end()

" Required after vundle plugin definitions
filetype plugin indent on

" Change leader
let mapleader = "<space>"
let g:mapleader = "<space>"

" Set Russian kyeboard !!!
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
highlight lCursor guifg=NONE guibg=Cyan
" setlocal spell spelllang=ru_yo,en_us

" Wildmenu
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=*.pyc                            " Python byte code
set wildignore+=**.class                          " Cursed Java class files

" Ignore in buffer explorer
let g:netrw_liststyle= 1 " Tree-mode
let g:netrw_list_hide= '.*\.swp$,.*/$'

" Save when losing focus
set autowriteall " Auto-save files when switching buffers or leaving vim.
au FocusLost * silent! :StripWhitespace<CR>:w<CR>
au TabLeave * silent! :StripWhitespace<CR>:w<CR>

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Basics
syntax enable
set number        " always show line numbers
set hidden        " Allow un-saved buffers in background
set clipboard=unnamed,unnamedplus
" set clipboard=unnamed " Share system clipboard.
set backspace=indent,eol,start " Make backspace behave normally.
set directory=/tmp// " swap files
set backupskip=/tmp/*,/private/tmp/*
set ffs=unix,dos,mac "Default file types
set nowrap        " don't wrap lines
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "  case-sensitive otherwise
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set title                " change the terminal's title
set guifont=Inconsolata\ for\ Powerline:h13

" Remove the toolbar if we're running under a GUI (e.g. MacVIM).
if has("gui_running")
  set guioptions=-t
endif

" Clipboard
if has('unnamedplus')
""  set clipboard=unnamedplus
  set clipboard=unnamed,unnamedplus
else
  set clipboard+=unnamed
endif

" Default background & theme
set background=dark
let g:rehash256=1
set t_Co=256
let g:airline_theme = 'luna'
colorscheme molokai
let g:molokai_original=1
" colorscheme solarized

" Special characters for hilighting non-priting spaces/tabs/etc.
set list listchars=tab:»\ ,trail:·

" Default Tabs & spaces
set tabstop=2     " a tab is four spaces
set shiftwidth=2  " number of spaces to use for autoindenting
set softtabstop=2
set expandtab
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting

" General Code Folding
set foldmethod=syntax
set foldlevel=99
set nofoldenable

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" Use keyboard switch
let g:XkbSwitchEnabled = 1

" I CAN HAZ NORMAL REGEXES?
nnoremap / /\v
vnoremap / /\v

" Make sure we hilight extra whitespace in the most annoying way possible.
" highlight ExtraWhitespace ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/


" General auto-commands
autocmd FileType * setlocal colorcolumn=0
" autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" Get rid of trailing whitespace highlighting in mutt.
autocmd FileType mail highlight clear ExtraWhitespace
autocmd FileType mail setlocal listchars=

" Toggle spellcheck in normal mode
map <F5> :setlocal spell! spelllang=en_us<CR>

" Markdown configurations
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" Ruby Configurations
autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 shiftwidth=2 colorcolumn=120

" PHP Configurations
autocmd FileType php setlocal colorcolumn=100

" HTML configurations
autocmd FileType html setlocal shiftwidth=4 tabstop=8 softtabstop=8 noexpandtab

" Python configurations
autocmd FileType python setlocal shiftwidth=4 expandtab tabstop=8 softtabstop=8
autocmd FileType python setlocal colorcolumn=80
autocmd FileType python map <buffer> <F4> :call Flake8()<CR>
autocmd FileType python autocmd BufWritePre * :%s/\s\+$//e
autocmd FileType python set omnifunc=pythoncomplete#Complete

" Javascript configurations
au BufNewFile,BufReadPost *.js setlocal shiftwidth=2 expandtab

" Ensure that JSON files have their filetype properly set.
au BufRead,BufNewFile *.json set filetype=json

" Puppet configurations
au FileType puppet setlocal noexpandtab

" Get jinja filetype selection working correctly for *.jinja.html files.
au BufNewFile,BufReadPost *.jinja* setlocal filetype=htmljinja

" Get rid of search hilighting with ,/
" nnoremap <silent> <leader>/ :nohlsearch<CR>

" Fix those pesky situations where you edit & need sudo to save
cmap w!! w !sudo tee % >/dev/null

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         BundleOpen                                      "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Split current tmux window, running `bundle open` on the
" argument-specified Gem name. Auto-completes from Gemfile.lock.
command! -nargs=* -complete=custom,ListGems BundleOpen silent execute "Start bundle open <args>"

" The function used to produce the autocomplete results.
fun! ListGems(A,L,P)
" Note that vim will filter for us... no need to do anything with A args.
  return system("grep -s '^ ' Gemfile.lock | sed 's/^ *//' | cut -d ' '  -f1 | sed 's/!//' | sort | uniq")
endfun

" Shortcut mapping.
nmap <leader>o :BundleOpen

"""""""""""""""""""""""""
" Plugin Configurations "
"""""""""""""""""""""""""

let g:EasyClipShareYanks = 1
let g:EasyClipCopyExplicitRegisterToDefault = 1
let g:EasyClipUseCutDefaults = 0
nmap x <Plug>MoveMotionPlug
xmap x <Plug>MoveMotionXPlug
nmap xx <Plug>MoveMotionLinePlug

let g:matchparen_insert_timeout = 90
let g:matchparen_timeout = 90

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                     Easy Tags                                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let b:easytags_auto_highlight = 0
" let g:easytags_always_enabled = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                        Vim - Gist                                       "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gist_get_multiplefile = 1


" For gem tags support
" autocmd FileType ruby let &l:tags = pathogen#legacyjoin(pathogen#uniq(
"       \ pathogen#split(&tags) +
"       \ map(split($GEM_PATH,':'),'v:val."/gems/*/tags"')))

" Pyflakes
"autocmd BufWritePost *.py call Flake8()
let g:flake8_ignore="E128,E501"
" let g:syntastic_python_checker_args='--ignore=E501,E128'

" Gist
let g:gist_clurker_schemalip_command = 'pbcopy'
let g:gist_detect_filetype = 2
let g:gist_show_privates = 1
let g:gist_post_private = 1

" TagBar
" nnoremap <silent> <F8> :TagbarToggle<CR>
" " let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
" let g:tagbar_autoshowtag = 1
" let g:tagbar_autofocus = 1
" let g:tagbar_type_ruby = {}
" let g:tagbar_type_ruby = {
"     \ 'kinds' : [
"         \ 'm:modules',
"         \ 'c:classes',
"         \ 'd:describes',
"         \ 'C:contexts',
"         \ 'f:methods',
"         \ 'F:singleton methods'
"     \ ]
" \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       YouCompleteMe                                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_auto_trigger = 1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_disable_for_files_larger_than_kb = 100
let g:ycm_use_ultisnips_completer = 0
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" crtl-p
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'  " search anything (in files, buffers and MRU files at the same time.)
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard']
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:ctrlp_root_markers = ['.git']
"let g:ctrlp_working_path_mode = 'ra' " search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0 " show the match window at the top of the screen
let g:ctrlp_max_height = 10 " maxiumum height of match window
let g:ctrlp_switch_buffer = 'et' " jump to a file if it's open already
let g:ctrlp_use_caching = 1 " enable caching
let g:ctrlp_clear_cache_on_exit=0 " speed up by not removing clearing cache evertime
let g:ctrlp_show_hidden = 0 " don't show me dotfiles
let g:ctrlp_mruf_max = 250 " number of recently opened files
nmap ; :CtrlPBuffer<CR>

" Double rainbow - What does it mean!?
let g:rainbow_active = 1

set laststatus=2
" let g:syntastic_enable_signs = 1
" let g:syntastic_auto_jump = 0
" let g:syntastic_puppet_lint_disable = 0
"
" " Airline configs
" let g:airline#extensions#tabline#enabled = 1
" let g:airline_powerline_fonts = 1
"
" if !exists('g:airline_symbols')
" 	let g:airline_symbols = {}
" endif

" NerdTree
" map <leader>t :NERDTreeToggle<CR>
" Toggle the NERD Tree on an off
nnoremap <Bs> :NERDTreeToggle<CR>
" Open the project tree and expose current file in the nerdtree with Ctrl-\
nnoremap <silent> <C-e> :NERDTreeFind<CR>
let NERDTreeIgnore=['\.pyc$', '\~$']
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30
let NERDTreeShowHidden=1

" vim-rspec mappings
" let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'
let g:rspec_command = 'call Send_to_Tmux("make\n")'

map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" My Key Mappings
nmap <space> za
map <Space> <Leader>
" nmap tr :NERDTreeToggle<CR>
" nnoremap <C-space> <i>
nnoremap <C-h> gT
nnoremap <C-l> gt
nnoremap ws :StripWhitespace<CR>:w<CR>
nmap <C-n> :tabnew<CR>
nnoremap <F7> <Esc><C-W><S-T>
":tab split<CR>
nnoremap <F3> :set hlsearch!<CR>:set is!<CR>
nnoremap <Leader>f :set hlsearch!<CR>:set is!<CR>
" imap II <C-O>I
" imap AA <C-O>A
" imap YY <C-O>y
" imap OO <C-O>O
" imap DD <C-O>dd
" imap UU <C-O>u
" imap CC <C-O>C
" imap PP <C-O>p
" Перемещение строк
" переместить одну строку
nnoremap Cr Pldebye
nnoremap cr pldebye
nmap <C-S-k> ddkP
nmap <C-S-j> ddp
" переместить несколько выделенных строк http://www.vim.org/scripts/script.php?script_id=1590
vmap <C-S-k> xkP'[V']
vmap <C-S-j> xp'[V']

" Аббревиатуры!
" PRY. Ruby Debugging.
" https://github.com/rking/pry-de/blob/master/vim/ftplugin/ruby_pry.vim
"
" …also, Insert Mode as bpry<space>
iabbr bpry require'pry';binding.pry
" And admit that the typos happen:
iabbr bpry require'pry';binding.pry

" Add the pry debug line with \bp (or <Space>bp, if you did: map <Space> <Leader> )
nnoremap <Leader>bp orequire'pry';binding.pry<esc>:w<cr>
" Alias for one-handed operation:
nnoremap <Leader><Leader>b <Leader>bp

" Keep pry from annoyingly hanging around when using, e.g. pry-rescue/minitest
map <f4> :wa<cr>:call system('kill-pry-rescue')<cr>

" Nab lines from ~/.pry_history (respects "count")
nmap <Leader>ph :<c-u>let pc = (v:count1 ? v:count1 : 1)<cr>:read !tail -<c-r>=pc<cr> ~/.pry_history<cr>:.-<c-r>=pc-1<cr>:norm <c-r>=pc<cr>==<cr>
" ↑ thanks to Houl, ZyX-i, and paradigm of #vim for all dogpiling on this one.

""""""""""""""""""""""""""""""""""""""""
" BACKUP / TMP FILES
""""""""""""""""""""""""""""""""""""""""
if isdirectory($HOME . '/.vim/backup') == 0
  :silent !mkdir -p ~/.vim/backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim/backup/
set backupdir^=./.vim-backup/
set backup


" Save your swp files to a less annoying place than the current directory.
" " If you have .vim-swap in the current directory, it'll use that.
" " Otherwise it saves it to ~/.vim/swap, ~/tmp or .
if isdirectory($HOME . '/.vim/swap') == 0
  :silent !mkdir -p ~/.vim/swap >/dev/null 2>&1
endif
set directory=./.vim-swap//
set directory+=~/.vim/swap//
set directory+=~/tmp//
set directory+=.

" viminfo stores the the state of your previous editing session
set viminfo+=n~/.vim/viminfo

if exists("+undofile")
  " undofile - This allows you to use undos after exiting and restarting
  " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
  " :help undo-persistence
  " This is only present in 7.3+
  if isdirectory($HOME . '/.vim/undo') == 0
          :silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
  endif
  set undodir=./.vim-undo//
  set undodir+=~/.vim/undo//
  set undofile
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              DiffOrig                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Switch                                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap - :Switch<cr>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               RuboCop                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vimrubocop_keymap = 0
nmap <Leader>r :RuboCop<CR>
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1

let loaded_matchparen = 1
set ttyfast
set lazyredraw
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 norelativenumber nocursorline
set foldmethod=indent
